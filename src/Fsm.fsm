/*
Copyright (C) 2018 Andre Leiradella

This file is part of RALibretro.

RALibretro is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

RALibretro is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*/

/*

To generate Fsm.h and Fsm.cpp from this file:

[Windows]
* install lua
  - download lua-5.2.4.tar.gz (http://www.lua.org/ftp/) and extract somewhere [it must be a 5.2 version]
  - open MinGW 64-bit and change to the folder where you extracted the tar.gz
  - run `make clean`, `make mingw` and `make install TO_BIN="lua.exe luac.exe lua52.dll"`
  - verify install:
    $ lua -e "print('hello world')"
    hello world
  - remove extracted files; they're not needed anymore
* install luarocks
  - download the latest ".win32.zip" not the ".windows-32.zip" (http://luarocks.github.io/luarocks/releases/) and extract it
  - open an elevated command prompt and change into the extracted folder
  - run `install.bat /lv 5.2 /bin c:\msys64\usr\local\bin /lib c:\msys64\usr\local\bin /inc c:\msys64\usr\local\include`
* install luasrcdiet
  - open an elevated command promot and change into the luarocks install folder (C:\Program Files (x86)\LuaRocks)
  - run `luarocks.bat install luasrcdiet`
* build ddlt
  - clone the https://github.com/leiradel/ddlt repository
  - open MinGW 64-bit and change to the cloned repository folder
  - manually run luasrcdiet as it was not installed under the MinGW context:
    `$ /c/Program\ Files\ \(x86\)/LuaRocks/bin/luasrcdiet.bat --noopt-emptylines src/boot.lua -o src/boot_diet.lua`
  - edit the Makefile to point to the correct lua locations:
    `INCLUDES=-Isrc -I/usr/local/include`
	`LUALIB=/usr/local/bin/lua52.dll`
  - allow make to do the rest of the work: `make`
* generate the FSM files:
  - from MinGW 64-bit console (in the ddlt repository):
    `lua examples/fsmc/fsmc.lua /e/source/RALibRetro/src/Fsm.fsm`
  - this will generate the Fsm.h and Fsm.cpp files in the same directory as the Fsm.fsm file.
*/

header {
  #include "Emulator.h"
  #include <string>

  typedef const std::string const_string;
}

fsm Fsm {
  class Application as ctx;

  after {
    ctx.updateMenu();
  }

  Start {
    loadCore(const_string core) => CoreLoaded {
      if (!ctx.loadCore(core)) {
        forbid;
      }
    }

    quit() => Quit;
  }

  Quit {}

  CoreLoaded {
    loadCore(const_string core) => unloadCore() => loadCore(core);

    unloadCore() => Start {
      ctx.unloadCore();
    }

    loadGame(const_string path) => GameRunning {
      if (!ctx.loadGame(path)) {
        forbid;
      }
    }

    quit() => unloadCore() => quit();
  }

  GameRunning {
    pauseGame() => GamePaused;

    pauseGameNoOvl() => GamePausedNoOvl {
      if (ctx.hardcore()) {
        forbid;
      }
    }

    resetGame() => GameRunning {
      ctx.resetGame();
    }

    step() => FrameStep {
      if (ctx.hardcore()) {
        forbid;
      }
    }
    
    unloadGame() => CoreLoaded {
      if (!ctx.unloadGame()) {
        forbid;
      }
    }

    loadCore(const_string core) => unloadGame() => unloadCore() => loadCore(core);

    loadGame(const_string path) => unloadGame() => loadGame(path);

    quit() => unloadGame() => quit();
  }

  GamePaused {
    resumeGame() => GameRunning;

    resetGame() => resumeGame() => resetGame();

    step() => FrameStep  {
      if (ctx.hardcore()) {
        forbid;
      }
    }

    unloadGame() => CoreLoaded {
      if (!ctx.unloadGame()) {
        forbid;
      }
    }

    loadCore(const_string core) => unloadGame() => unloadCore() => loadCore(core);

    loadGame(const_string path) => unloadGame() => loadGame(path);

    quit() => unloadGame() => quit();
  }

  GamePausedNoOvl {
    pauseGame() => GamePaused;

    resumeGame() => GameRunning;

    resetGame() => resumeGame() => resetGame();

    step() => FrameStep {
      if (ctx.hardcore()) {
        forbid;
      }
    }

    unloadGame() => CoreLoaded {
      if (!ctx.unloadGame()) {
        forbid;
      }
    }

    loadCore(const_string core) => unloadGame() => unloadCore() => loadCore(core);

    loadGame(const_string path) => unloadGame() => loadGame(path);

    quit() => unloadGame() => quit();
  }

  FrameStep {
    resumeGame() => GamePaused;
  }
}

