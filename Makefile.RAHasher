# supported parameters
#  ARCH           architecture - "x86" or "x64" [detected if not set]
#  DEBUG          if set to anything, builds with DEBUG symbols

include Makefile.common

# Toolset setup
CC=gcc
CXX=g++

ifeq ($(OS),Windows_NT)
  EXE=.exe
  KERNEL=windows
else
  KERNEL := $(shell uname -s)
endif

# compile flags
DEFINES=-D_CONSOLE
CFLAGS += $(DEFINES)
CXXFLAGS += $(DEFINES)

# main
LIBS=
OBJS=\
	src/components/Logger.o \
	src/miniz/miniz.o \
	src/miniz/miniz_tdef.o \
	src/miniz/miniz_tinfl.o \
	src/miniz/miniz_zip.o \
	src/rcheevos/src/rhash/cdreader.o \
	src/rcheevos/src/rhash/hash.o \
	src/rcheevos/src/rhash/md5.o \
	src/Git.o \
	src/Util.o \
	src/RAHasher.o

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

all: $(OUTDIR)/RAHasher-$(ARCH)-$(KERNEL)$(EXE)

$(OUTDIR)/RAHasher-$(ARCH)-$(KERNEL)$(EXE): $(OBJS)
	mkdir -p $(OUTDIR)
	$(CXX) -o $@ $+ $(LDFLAGS)

src/Git.cpp: etc/Git.cpp.template FORCE
	cat $< | sed s/GITFULLHASH/`git rev-parse HEAD | tr -d "\n"`/g | sed s/GITMINIHASH/`git rev-parse HEAD | tr -d "\n" | cut -c 1-7`/g | sed s/GITRELEASE/`git describe --tags | sed s/\-.*//g | tr -d "\n"`/g > $@

clean:
	rm -f $(OUTDIR)/RAHasher-$(ARCH)-$(KERNEL)$(EXE) $(OBJS)

.PHONY: clean FORCE
